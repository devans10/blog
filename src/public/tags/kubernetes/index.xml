<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kubernetes on Dave Evans</title>
    <link>https://www.daveevans.us/tags/kubernetes/</link>
    <description>Recent content in kubernetes on Dave Evans</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 27 Nov 2019 12:39:08 -0500</lastBuildDate>
    
	<atom:link href="https://www.daveevans.us/tags/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CI Build System with Terraform, Anisble, and Jenkins</title>
      <link>https://www.daveevans.us/posts/ci-build-system-with-terraform-ansible-jenkins/</link>
      <pubDate>Wed, 27 Nov 2019 12:39:08 -0500</pubDate>
      
      <guid>https://www.daveevans.us/posts/ci-build-system-with-terraform-ansible-jenkins/</guid>
      <description>In the first part of this series, I described some of the goals for moving our organization to using Infrastructure as Code processes. In this post, I&amp;rsquo;m going to describe the setup that was created to have a server build pipeline for on premise deployments of Virtual Servers. However, I feel the strength of this approach is its ability to be extended to application deployments on top of these server builds, and the possibilty to have the same setup on any cloud of your choosing.</description>
    </item>
    
    <item>
      <title>My Journey to Infrastructure as Code - Part 1</title>
      <link>https://www.daveevans.us/posts/my-journey-to-infrastructure-as-code/</link>
      <pubDate>Sat, 02 Nov 2019 08:24:10 -0400</pubDate>
      
      <guid>https://www.daveevans.us/posts/my-journey-to-infrastructure-as-code/</guid>
      <description>This is the first part of a multipart series on how I introduced Infrastructure as Code(IaC) processes to my organization. My end goal is to implement a complete IaC pipeline from image build to deployment of infrastructure, but we are an organization that needs to go through a bit of a transformation and need to take this journey in small incremental steps. We have a very on-premises bias to our systems due to strict compliance regulations.</description>
    </item>
    
    <item>
      <title>Migrating Nextcloud to Kubernetes</title>
      <link>https://www.daveevans.us/posts/migrating-nextcloud-to-kubernetes/</link>
      <pubDate>Sat, 29 Jun 2019 21:15:41 -0400</pubDate>
      
      <guid>https://www.daveevans.us/posts/migrating-nextcloud-to-kubernetes/</guid>
      <description>A little under a year ago I decided to migrate from Dropbox to Nextcloud and I couldn&amp;rsquo;t be happier with the results. It has been a very painless experience. I have upgraded multiple times without issue. Automatic photo sync from my phone works flawlessly, and I have begun to do much more with it than I ever did with Dropbox.
I have only had one hiccup with the install, and quite honestly it was my fault.</description>
    </item>
    
    <item>
      <title>Kubernetes Nginx Ingress Controller</title>
      <link>https://www.daveevans.us/posts/kubernetes-nginx-ingress-controller/</link>
      <pubDate>Sat, 16 Mar 2019 15:43:08 -0400</pubDate>
      
      <guid>https://www.daveevans.us/posts/kubernetes-nginx-ingress-controller/</guid>
      <description>In my previous post, I deployed my website on a Kubernetes cluster running on DigitalOcean. However, I still would like to decrease my costs as much as possible. The original setup used a Digital Ocean LoadBalancer instance as the Ingress to the Kubernetes Pods. This works great and is very easy to setup with Terraform. However, there are a couple downsides to this setup. At this time, the Kubernetes ingress objects cannot take advantage of Let&amp;rsquo;s Encrypt integration with the DigitalOcean LoadBalancer instances, and the solution will end up being a bit pricey.</description>
    </item>
    
    <item>
      <title>Deploying My Blog on Kubernetes</title>
      <link>https://www.daveevans.us/posts/deploying-my-blog-on-kubernetes/</link>
      <pubDate>Sun, 03 Mar 2019 21:58:41 -0500</pubDate>
      
      <guid>https://www.daveevans.us/posts/deploying-my-blog-on-kubernetes/</guid>
      <description>So its been quite awhile since I posted anything. That is because I have been very busy with some personal projects and doing a lot of studying of some new technologies.
As you can see I have completely redone my site. The previous site was running on the Ghost platform, which was spun up using a one-click deployment from DigitalOcean. Ghost was a good platform. I liked doing the posts in markdown, and it was easy to use.</description>
    </item>
    
    <item>
      <title>Kubernetes on Raspberry Pi, The Hard Way - Part 5</title>
      <link>https://www.daveevans.us/posts/kubernetes-on-raspberry-pi-the-hard-way-part-5/</link>
      <pubDate>Sun, 28 Oct 2018 01:00:00 +0000</pubDate>
      
      <guid>https://www.daveevans.us/posts/kubernetes-on-raspberry-pi-the-hard-way-part-5/</guid>
      <description>Kubernetes on Raspberry Pi, The Hard Way - Part 1 Kubernetes on Raspberry Pi, The Hard Way - Part 2 Kubernetes on Raspberry Pi, The Hard Way - Part 3 Kubernetes on Raspberry Pi, The Hard Way - Part 4  The final part of this journey is to setup the networking. Which in the end is pretty straight forward, but did cause me some grief. I had trouble getting kube-dns working.</description>
    </item>
    
    <item>
      <title>Kubernetes on Raspberry Pi, The Hard Way - Part 4</title>
      <link>https://www.daveevans.us/posts/kubernetes-on-raspberry-pi-the-hard-way-part-4/</link>
      <pubDate>Sun, 28 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.daveevans.us/posts/kubernetes-on-raspberry-pi-the-hard-way-part-4/</guid>
      <description>Kubernetes on Raspberry Pi, The Hard Way - Part 1 Kubernetes on Raspberry Pi, The Hard Way - Part 2 Kubernetes on Raspberry Pi, The Hard Way - Part 3  Now its time to setup the worker nodes. This is where I will deviate the most from the original Kubernetes the Hard Way, as I plan to change the container runtime from containerd to docker.
Install and Configure Docker These commands should be run on each worker node.</description>
    </item>
    
    <item>
      <title>Kubernetes on Raspberry Pi, The Hard Way - Part 3</title>
      <link>https://www.daveevans.us/posts/kubernetes-on-raspberry-pi-the-hard-way-part-3/</link>
      <pubDate>Sat, 27 Oct 2018 03:00:00 +0000</pubDate>
      
      <guid>https://www.daveevans.us/posts/kubernetes-on-raspberry-pi-the-hard-way-part-3/</guid>
      <description>Kubernetes on Raspberry Pi, The Hard Way - Part 1 Kubernetes on Raspberry Pi, The Hard Way - Part 2  In this part of the series, we will setup the 3 master nodes. Starting by installing the Ectd, then the kube-apiserver, kube-controller-manager, and kube-scheduler. In a bit of a departure from the original Kubernetes the Hard Way, I will not setup the the local nginx proxy on each master node to proxy the healthz endpoint.</description>
    </item>
    
    <item>
      <title>Kubernetes on Raspberry Pi, The Hard Way - Part 2</title>
      <link>https://www.daveevans.us/posts/kubernetes-on-raspberry-pi-the-hard-way-part-2/</link>
      <pubDate>Sat, 27 Oct 2018 02:00:00 +0000</pubDate>
      
      <guid>https://www.daveevans.us/posts/kubernetes-on-raspberry-pi-the-hard-way-part-2/</guid>
      <description>Kubernetes on Raspberry Pi, The Hard Way - Part 1
Now the fun begins&amp;hellip;
After the setup of the raspberry pi servers in part 1, I have the hostnames and IPs in the table below. We now have to create a CA and certificates for all the different pieces of the cluster. Then create kubeconfigs for the different components to use to connect to the cluster, and distribute everything out to the nodes.</description>
    </item>
    
    <item>
      <title>Kubernetes on Raspberry Pi, The Hard Way - Part 1</title>
      <link>https://www.daveevans.us/posts/kubernetes-on-raspberry-pi-the-hard-way-part-1/</link>
      <pubDate>Sat, 27 Oct 2018 01:00:00 +0000</pubDate>
      
      <guid>https://www.daveevans.us/posts/kubernetes-on-raspberry-pi-the-hard-way-part-1/</guid>
      <description>There are SO many blog posts about installing a Kubernetes cluster on Raspberry Pi, I didn&amp;rsquo;t want to be left out.
I have been playing around with Kubernetes for a couple months now. I have setup MiniKube and OpenShift on a Single Fedora Node that runs on a Mac Mini. I&amp;rsquo;ve taken the Certified Kubernetes Administrator course on Linux Academy, which sets up a small cluster, and I have just finished The Linux Academy course Kubernetes the Hard Way, which follows Kelsey Hightower&amp;rsquo;s paper Kubernetes The Hard Way.</description>
    </item>
    
    <item>
      <title>Deploying Kubernetes on AWS</title>
      <link>https://www.daveevans.us/posts/deploying-kubernetes-on-aws/</link>
      <pubDate>Thu, 06 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.daveevans.us/posts/deploying-kubernetes-on-aws/</guid>
      <description>Ok, yes, I know that I can use EKS for running containers on AWS, or any number of KaaS or hosted solutions, but none of that is any fun. I know. I have an odd definition of fun.
Anyway, my goal here is to standup a Kubernetes cluster on AWS. I just passed my first AWS Certification, and I want some things to practice on. This will probably actually end up as more of a series of posts, as I want to learn CloudFormation, mess with the RDS instances, and eventually probably move this blog over to AWS.</description>
    </item>
    
  </channel>
</rss>